/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ComplaintStruct = {
  complainant: AddressLike;
  whoAbout: AddressLike;
  complaintIndex: BigNumberish;
  propertyIndex: BigNumberish;
  description: string;
  confirmed: BigNumberish;
};

export type ComplaintStructOutput = [
  complainant: string,
  whoAbout: string,
  complaintIndex: bigint,
  propertyIndex: bigint,
  description: string,
  confirmed: bigint
] & {
  complainant: string;
  whoAbout: string;
  complaintIndex: bigint;
  propertyIndex: bigint;
  description: string;
  confirmed: bigint;
};

export type LeaseInfoStruct = {
  tenantAddress: AddressLike;
  initiatorAddress: AddressLike;
  tenantName: string;
  startDate: BigNumberish;
  endDate: BigNumberish;
  isActive: boolean;
  duration: BigNumberish;
  terminationRequester: AddressLike;
  terminationReason: string;
  terminationRequestTime: BigNumberish;
};

export type LeaseInfoStructOutput = [
  tenantAddress: string,
  initiatorAddress: string,
  tenantName: string,
  startDate: bigint,
  endDate: bigint,
  isActive: boolean,
  duration: bigint,
  terminationRequester: string,
  terminationReason: string,
  terminationRequestTime: bigint
] & {
  tenantAddress: string;
  initiatorAddress: string;
  tenantName: string;
  startDate: bigint;
  endDate: bigint;
  isActive: boolean;
  duration: bigint;
  terminationRequester: string;
  terminationReason: string;
  terminationRequestTime: bigint;
};

export type PropertyInfoStruct = {
  propertyIndex: BigNumberish;
  propertyAddress: string;
  owner: AddressLike;
  propertyType: BigNumberish;
  ownerName: string;
  leaseInfo: LeaseInfoStruct;
  isListed: boolean;
};

export type PropertyInfoStructOutput = [
  propertyIndex: bigint,
  propertyAddress: string,
  owner: string,
  propertyType: bigint,
  ownerName: string,
  leaseInfo: LeaseInfoStructOutput,
  isListed: boolean
] & {
  propertyIndex: bigint;
  propertyAddress: string;
  owner: string;
  propertyType: bigint;
  ownerName: string;
  leaseInfo: LeaseInfoStructOutput;
  isListed: boolean;
};

export interface LeaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProperty"
      | "allComplaints"
      | "complaints"
      | "complaintsLength"
      | "confirmTermination"
      | "getAllComplaints"
      | "getAllProperties"
      | "isManager"
      | "listProperty"
      | "managers"
      | "owner"
      | "properties"
      | "propertiesLength"
      | "removeManager"
      | "requestTermination"
      | "reviewComplaint"
      | "setManager"
      | "signLease"
      | "startLease"
      | "submitComplaint"
      | "unlistProperty"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComplaintReported"
      | "LeaseEnded"
      | "LeaseStarted"
      | "TerminationRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProperty",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allComplaints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "complaints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "complaintsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTermination",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllComplaints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProperties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listProperty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "properties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertiesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTermination",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewComplaint",
    values: [BigNumberish, BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signLease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startLease",
    values: [BigNumberish, AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitComplaint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistProperty",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allComplaints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complaints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "complaintsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTermination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllComplaints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "properties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertiesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTermination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewComplaint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signLease", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startLease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitComplaint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistProperty",
    data: BytesLike
  ): Result;
}

export namespace ComplaintReportedEvent {
  export type InputTuple = [
    complainant: AddressLike,
    whoAbout: AddressLike,
    propertyIndex: BigNumberish,
    propertyAddress: string,
    description: string,
    tenantAddress: AddressLike,
    propertyOwner: AddressLike
  ];
  export type OutputTuple = [
    complainant: string,
    whoAbout: string,
    propertyIndex: bigint,
    propertyAddress: string,
    description: string,
    tenantAddress: string,
    propertyOwner: string
  ];
  export interface OutputObject {
    complainant: string;
    whoAbout: string;
    propertyIndex: bigint;
    propertyAddress: string;
    description: string;
    tenantAddress: string;
    propertyOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaseEndedEvent {
  export type InputTuple = [
    tenantAddress: AddressLike,
    ownerAddress: AddressLike,
    propertyIndex: BigNumberish,
    startDate: BigNumberish,
    endDate: BigNumberish,
    propertyType: BigNumberish,
    propertyAddress: string,
    ownerName: string,
    tenantName: string,
    terminationReason: string
  ];
  export type OutputTuple = [
    tenantAddress: string,
    ownerAddress: string,
    propertyIndex: bigint,
    startDate: bigint,
    endDate: bigint,
    propertyType: bigint,
    propertyAddress: string,
    ownerName: string,
    tenantName: string,
    terminationReason: string
  ];
  export interface OutputObject {
    tenantAddress: string;
    ownerAddress: string;
    propertyIndex: bigint;
    startDate: bigint;
    endDate: bigint;
    propertyType: bigint;
    propertyAddress: string;
    ownerName: string;
    tenantName: string;
    terminationReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaseStartedEvent {
  export type InputTuple = [
    tenantAddress: AddressLike,
    ownerAddress: AddressLike,
    propertyIndex: BigNumberish,
    startDate: BigNumberish,
    endDate: BigNumberish,
    propertyType: BigNumberish,
    propertyAddress: string,
    ownerName: string,
    tenantName: string
  ];
  export type OutputTuple = [
    tenantAddress: string,
    ownerAddress: string,
    propertyIndex: bigint,
    startDate: bigint,
    endDate: bigint,
    propertyType: bigint,
    propertyAddress: string,
    ownerName: string,
    tenantName: string
  ];
  export interface OutputObject {
    tenantAddress: string;
    ownerAddress: string;
    propertyIndex: bigint;
    startDate: bigint;
    endDate: bigint;
    propertyType: bigint;
    propertyAddress: string;
    ownerName: string;
    tenantName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TerminationRequestedEvent {
  export type InputTuple = [
    requesterAddress: AddressLike,
    propertyIndex: BigNumberish,
    propertyAddress: string,
    ownerName: string,
    tenantName: string,
    reason: string
  ];
  export type OutputTuple = [
    requesterAddress: string,
    propertyIndex: bigint,
    propertyAddress: string,
    ownerName: string,
    tenantName: string,
    reason: string
  ];
  export interface OutputObject {
    requesterAddress: string;
    propertyIndex: bigint;
    propertyAddress: string;
    ownerName: string;
    tenantName: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lease extends BaseContract {
  connect(runner?: ContractRunner | null): Lease;
  waitForDeployment(): Promise<this>;

  interface: LeaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProperty: TypedContractMethod<
    [propertyAddress: string, propertyType: BigNumberish, ownerName: string],
    [void],
    "nonpayable"
  >;

  allComplaints: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        complainant: string;
        whoAbout: string;
        complaintIndex: bigint;
        propertyIndex: bigint;
        description: string;
        confirmed: bigint;
      }
    ],
    "view"
  >;

  complaints: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        complainant: string;
        whoAbout: string;
        complaintIndex: bigint;
        propertyIndex: bigint;
        description: string;
        confirmed: bigint;
      }
    ],
    "view"
  >;

  complaintsLength: TypedContractMethod<[], [bigint], "view">;

  confirmTermination: TypedContractMethod<
    [propertyIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllComplaints: TypedContractMethod<[], [ComplaintStructOutput[]], "view">;

  getAllProperties: TypedContractMethod<
    [],
    [PropertyInfoStructOutput[]],
    "view"
  >;

  isManager: TypedContractMethod<
    [managerAddress: AddressLike],
    [boolean],
    "view"
  >;

  listProperty: TypedContractMethod<
    [propertyIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  managers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  properties: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        LeaseInfoStructOutput,
        boolean
      ] & {
        propertyIndex: bigint;
        propertyAddress: string;
        owner: string;
        propertyType: bigint;
        ownerName: string;
        leaseInfo: LeaseInfoStructOutput;
        isListed: boolean;
      }
    ],
    "view"
  >;

  propertiesLength: TypedContractMethod<[], [bigint], "view">;

  removeManager: TypedContractMethod<
    [managerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  requestTermination: TypedContractMethod<
    [propertyIndex: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  reviewComplaint: TypedContractMethod<
    [
      propertyIndex: BigNumberish,
      complaintIndex: BigNumberish,
      whoAbout: AddressLike,
      confirmation: boolean
    ],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [managerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  signLease: TypedContractMethod<
    [propertyIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  startLease: TypedContractMethod<
    [
      propertyIndex: BigNumberish,
      tenantAddress: AddressLike,
      tenantName: string,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  submitComplaint: TypedContractMethod<
    [propertyIndex: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;

  unlistProperty: TypedContractMethod<
    [propertyIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProperty"
  ): TypedContractMethod<
    [propertyAddress: string, propertyType: BigNumberish, ownerName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allComplaints"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        complainant: string;
        whoAbout: string;
        complaintIndex: bigint;
        propertyIndex: bigint;
        description: string;
        confirmed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "complaints"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, string, bigint] & {
        complainant: string;
        whoAbout: string;
        complaintIndex: bigint;
        propertyIndex: bigint;
        description: string;
        confirmed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "complaintsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmTermination"
  ): TypedContractMethod<[propertyIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllComplaints"
  ): TypedContractMethod<[], [ComplaintStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllProperties"
  ): TypedContractMethod<[], [PropertyInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "isManager"
  ): TypedContractMethod<[managerAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listProperty"
  ): TypedContractMethod<[propertyIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "properties"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        LeaseInfoStructOutput,
        boolean
      ] & {
        propertyIndex: bigint;
        propertyAddress: string;
        owner: string;
        propertyType: bigint;
        ownerName: string;
        leaseInfo: LeaseInfoStructOutput;
        isListed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propertiesLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeManager"
  ): TypedContractMethod<[managerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTermination"
  ): TypedContractMethod<
    [propertyIndex: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewComplaint"
  ): TypedContractMethod<
    [
      propertyIndex: BigNumberish,
      complaintIndex: BigNumberish,
      whoAbout: AddressLike,
      confirmation: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<[managerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signLease"
  ): TypedContractMethod<[propertyIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startLease"
  ): TypedContractMethod<
    [
      propertyIndex: BigNumberish,
      tenantAddress: AddressLike,
      tenantName: string,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitComplaint"
  ): TypedContractMethod<
    [propertyIndex: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlistProperty"
  ): TypedContractMethod<[propertyIndex: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ComplaintReported"
  ): TypedContractEvent<
    ComplaintReportedEvent.InputTuple,
    ComplaintReportedEvent.OutputTuple,
    ComplaintReportedEvent.OutputObject
  >;
  getEvent(
    key: "LeaseEnded"
  ): TypedContractEvent<
    LeaseEndedEvent.InputTuple,
    LeaseEndedEvent.OutputTuple,
    LeaseEndedEvent.OutputObject
  >;
  getEvent(
    key: "LeaseStarted"
  ): TypedContractEvent<
    LeaseStartedEvent.InputTuple,
    LeaseStartedEvent.OutputTuple,
    LeaseStartedEvent.OutputObject
  >;
  getEvent(
    key: "TerminationRequested"
  ): TypedContractEvent<
    TerminationRequestedEvent.InputTuple,
    TerminationRequestedEvent.OutputTuple,
    TerminationRequestedEvent.OutputObject
  >;

  filters: {
    "ComplaintReported(address,address,uint256,string,string,address,address)": TypedContractEvent<
      ComplaintReportedEvent.InputTuple,
      ComplaintReportedEvent.OutputTuple,
      ComplaintReportedEvent.OutputObject
    >;
    ComplaintReported: TypedContractEvent<
      ComplaintReportedEvent.InputTuple,
      ComplaintReportedEvent.OutputTuple,
      ComplaintReportedEvent.OutputObject
    >;

    "LeaseEnded(address,address,uint256,uint256,uint256,uint8,string,string,string,string)": TypedContractEvent<
      LeaseEndedEvent.InputTuple,
      LeaseEndedEvent.OutputTuple,
      LeaseEndedEvent.OutputObject
    >;
    LeaseEnded: TypedContractEvent<
      LeaseEndedEvent.InputTuple,
      LeaseEndedEvent.OutputTuple,
      LeaseEndedEvent.OutputObject
    >;

    "LeaseStarted(address,address,uint256,uint256,uint256,uint8,string,string,string)": TypedContractEvent<
      LeaseStartedEvent.InputTuple,
      LeaseStartedEvent.OutputTuple,
      LeaseStartedEvent.OutputObject
    >;
    LeaseStarted: TypedContractEvent<
      LeaseStartedEvent.InputTuple,
      LeaseStartedEvent.OutputTuple,
      LeaseStartedEvent.OutputObject
    >;

    "TerminationRequested(address,uint256,string,string,string,string)": TypedContractEvent<
      TerminationRequestedEvent.InputTuple,
      TerminationRequestedEvent.OutputTuple,
      TerminationRequestedEvent.OutputObject
    >;
    TerminationRequested: TypedContractEvent<
      TerminationRequestedEvent.InputTuple,
      TerminationRequestedEvent.OutputTuple,
      TerminationRequestedEvent.OutputObject
    >;
  };
}
