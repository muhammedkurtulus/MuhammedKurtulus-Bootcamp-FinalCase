/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LeaseContract {
  export type LeaseInfoStruct = {
    tenantAddress: AddressLike;
    tenantName: string;
    startDate: BigNumberish;
    endDate: BigNumberish;
  };

  export type LeaseInfoStructOutput = [
    tenantAddress: string,
    tenantName: string,
    startDate: bigint,
    endDate: bigint
  ] & {
    tenantAddress: string;
    tenantName: string;
    startDate: bigint;
    endDate: bigint;
  };

  export type PropertyInfoStruct = {
    owner: AddressLike;
    propertyType: BigNumberish;
    ownerName: string;
    leaseInfo: LeaseContract.LeaseInfoStruct;
  };

  export type PropertyInfoStructOutput = [
    owner: string,
    propertyType: bigint,
    ownerName: string,
    leaseInfo: LeaseContract.LeaseInfoStructOutput
  ] & {
    owner: string;
    propertyType: bigint;
    ownerName: string;
    leaseInfo: LeaseContract.LeaseInfoStructOutput;
  };
}

export interface LeaseContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProperty"
      | "endLease"
      | "getOwnerProperties"
      | "getPropertyInfo"
      | "ownerProperties"
      | "properties"
      | "reportIssue"
      | "startLease"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "IssueReported" | "LeaseEnded" | "LeaseStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProperty",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "endLease", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOwnerProperties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerProperties",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "properties", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reportIssue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startLease",
    values: [string, AddressLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endLease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "properties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportIssue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startLease", data: BytesLike): Result;
}

export namespace IssueReportedEvent {
  export type InputTuple = [
    tenantAddress: AddressLike,
    propertyAddress: string,
    tenantName: string,
    issueDescription: string
  ];
  export type OutputTuple = [
    tenantAddress: string,
    propertyAddress: string,
    tenantName: string,
    issueDescription: string
  ];
  export interface OutputObject {
    tenantAddress: string;
    propertyAddress: string;
    tenantName: string;
    issueDescription: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaseEndedEvent {
  export type InputTuple = [
    tenantAddress: AddressLike,
    ownerAddress: AddressLike,
    propertyAddress: string,
    startDate: BigNumberish,
    endDate: BigNumberish,
    propertyType: BigNumberish,
    ownerName: string,
    tenantName: string
  ];
  export type OutputTuple = [
    tenantAddress: string,
    ownerAddress: string,
    propertyAddress: string,
    startDate: bigint,
    endDate: bigint,
    propertyType: bigint,
    ownerName: string,
    tenantName: string
  ];
  export interface OutputObject {
    tenantAddress: string;
    ownerAddress: string;
    propertyAddress: string;
    startDate: bigint;
    endDate: bigint;
    propertyType: bigint;
    ownerName: string;
    tenantName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaseStartedEvent {
  export type InputTuple = [
    tenantAddress: AddressLike,
    ownerAddress: AddressLike,
    propertyAddress: string,
    startDate: BigNumberish,
    endDate: BigNumberish,
    propertyType: BigNumberish,
    ownerName: string,
    tenantName: string
  ];
  export type OutputTuple = [
    tenantAddress: string,
    ownerAddress: string,
    propertyAddress: string,
    startDate: bigint,
    endDate: bigint,
    propertyType: bigint,
    ownerName: string,
    tenantName: string
  ];
  export interface OutputObject {
    tenantAddress: string;
    ownerAddress: string;
    propertyAddress: string;
    startDate: bigint;
    endDate: bigint;
    propertyType: bigint;
    ownerName: string;
    tenantName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LeaseContract extends BaseContract {
  connect(runner?: ContractRunner | null): LeaseContract;
  waitForDeployment(): Promise<this>;

  interface: LeaseContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProperty: TypedContractMethod<
    [propertyAddress: string, propertyType: BigNumberish, ownerName: string],
    [void],
    "nonpayable"
  >;

  endLease: TypedContractMethod<
    [propertyAddress: string],
    [void],
    "nonpayable"
  >;

  getOwnerProperties: TypedContractMethod<
    [],
    [LeaseContract.PropertyInfoStructOutput[]],
    "view"
  >;

  getPropertyInfo: TypedContractMethod<
    [propertyAddress: string],
    [LeaseContract.PropertyInfoStructOutput],
    "view"
  >;

  ownerProperties: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, LeaseContract.LeaseInfoStructOutput] & {
        owner: string;
        propertyType: bigint;
        ownerName: string;
        leaseInfo: LeaseContract.LeaseInfoStructOutput;
      }
    ],
    "view"
  >;

  properties: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, LeaseContract.LeaseInfoStructOutput] & {
        owner: string;
        propertyType: bigint;
        ownerName: string;
        leaseInfo: LeaseContract.LeaseInfoStructOutput;
      }
    ],
    "view"
  >;

  reportIssue: TypedContractMethod<
    [propertyAddress: string, issueDescription: string],
    [void],
    "nonpayable"
  >;

  startLease: TypedContractMethod<
    [
      propertyAddress: string,
      tenantAddress: AddressLike,
      tenantName: string,
      durationDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProperty"
  ): TypedContractMethod<
    [propertyAddress: string, propertyType: BigNumberish, ownerName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endLease"
  ): TypedContractMethod<[propertyAddress: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwnerProperties"
  ): TypedContractMethod<
    [],
    [LeaseContract.PropertyInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPropertyInfo"
  ): TypedContractMethod<
    [propertyAddress: string],
    [LeaseContract.PropertyInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerProperties"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, LeaseContract.LeaseInfoStructOutput] & {
        owner: string;
        propertyType: bigint;
        ownerName: string;
        leaseInfo: LeaseContract.LeaseInfoStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "properties"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, LeaseContract.LeaseInfoStructOutput] & {
        owner: string;
        propertyType: bigint;
        ownerName: string;
        leaseInfo: LeaseContract.LeaseInfoStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reportIssue"
  ): TypedContractMethod<
    [propertyAddress: string, issueDescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startLease"
  ): TypedContractMethod<
    [
      propertyAddress: string,
      tenantAddress: AddressLike,
      tenantName: string,
      durationDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "IssueReported"
  ): TypedContractEvent<
    IssueReportedEvent.InputTuple,
    IssueReportedEvent.OutputTuple,
    IssueReportedEvent.OutputObject
  >;
  getEvent(
    key: "LeaseEnded"
  ): TypedContractEvent<
    LeaseEndedEvent.InputTuple,
    LeaseEndedEvent.OutputTuple,
    LeaseEndedEvent.OutputObject
  >;
  getEvent(
    key: "LeaseStarted"
  ): TypedContractEvent<
    LeaseStartedEvent.InputTuple,
    LeaseStartedEvent.OutputTuple,
    LeaseStartedEvent.OutputObject
  >;

  filters: {
    "IssueReported(address,string,string,string)": TypedContractEvent<
      IssueReportedEvent.InputTuple,
      IssueReportedEvent.OutputTuple,
      IssueReportedEvent.OutputObject
    >;
    IssueReported: TypedContractEvent<
      IssueReportedEvent.InputTuple,
      IssueReportedEvent.OutputTuple,
      IssueReportedEvent.OutputObject
    >;

    "LeaseEnded(address,address,string,uint256,uint256,uint8,string,string)": TypedContractEvent<
      LeaseEndedEvent.InputTuple,
      LeaseEndedEvent.OutputTuple,
      LeaseEndedEvent.OutputObject
    >;
    LeaseEnded: TypedContractEvent<
      LeaseEndedEvent.InputTuple,
      LeaseEndedEvent.OutputTuple,
      LeaseEndedEvent.OutputObject
    >;

    "LeaseStarted(address,address,string,uint256,uint256,uint8,string,string)": TypedContractEvent<
      LeaseStartedEvent.InputTuple,
      LeaseStartedEvent.OutputTuple,
      LeaseStartedEvent.OutputObject
    >;
    LeaseStarted: TypedContractEvent<
      LeaseStartedEvent.InputTuple,
      LeaseStartedEvent.OutputTuple,
      LeaseStartedEvent.OutputObject
    >;
  };
}
